#pragma kernel Update

#define THREAD_X 256

#include "/Assets/Shaders/Libs/SimplexNoiseGrad3D.cginc"
#include "FlowGrid.cginc"

float3 _WallSize;
float3 _WallCenter;

float _NoiseScale;

float _Time;
RWStructuredBuffer<float3> _FlowGridBuffer;

float3 curlNoise(float3 p) {
	const float e = 0.0009765625;
	const float e2 = 2.0 * e;

	float3 dx = float3(e, 0, 0);
	float3 dy = float3(0, e, 0);
	float3 dz = float3(0, 0, e);

	float3 p_x0 = snoise_grad(p - dx);
	float3 p_x1 = snoise_grad(p + dx);
	float3 p_y0 = snoise_grad(p - dy);
	float3 p_y1 = snoise_grad(p + dy);
	float3 p_z0 = snoise_grad(p - dz);
	float3 p_z1 = snoise_grad(p + dz);

	float x = p_y1.z - p_y0.z - p_z1.y + p_z0.y;
	float y = p_z1.x - p_z0.x - p_x1.z + p_x0.z;
	float z = p_x1.y - p_x0.y - p_y1.x + p_y0.x;

	return normalize(float3(x, y, z) / e2);
}

[numthreads(THREAD_X, 1, 1)]
void Update(uint3 id : SV_DispatchThreadID)
{
	uint myID = id.x;
	float3 pos = GetIndexToPosition(myID);
	
	pos = pos * _NoiseScale;
	pos += _Time;
	//float3 vec = snoise_grad(pos);
	float3 vec = curlNoise(pos);
	_FlowGridBuffer[myID] = vec;

}
